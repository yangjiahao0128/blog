<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端性能优化</title>
    <url>/blog/2019/05/05/8s7h3j1h/</url>
    <content><![CDATA[<h1 id="网络方面："><a href="#网络方面：" class="headerlink" title="网络方面："></a>网络方面：</h1><ol>
<li>减少http请求（合并js/css文件、雪碧图、使用base64表示简单的图片）；</li>
<li>减少资源体积（gzip压缩、js混淆、css压缩、图片压缩）；</li>
<li>缓存（DNS缓存、CDN部署与缓存、http缓存）；</li>
<li>移动端优化（首屏加载优化、慎用web字体）；</li>
</ol>
<h1 id="渲染及dom操作："><a href="#渲染及dom操作：" class="headerlink" title="渲染及dom操作："></a>渲染及dom操作：</h1><ol>
<li>优化网页渲染（文件引用顺序css/js、避免内联样式）；</li>
<li>DOM操作优化（多使用className、多事件代理、多使用css动画、减少DOM操作、少使用css表达式）；</li>
<li>操作规范（img/iframe中src、css属性为0省略单位、禁止图片缩放、CSS减少重复多继承）；</li>
<li>移动端优化（长列表优化、防抖和节流、<del>~</del>能力不足，待探究）；</li>
</ol>
<h1 id="数据方面："><a href="#数据方面：" class="headerlink" title="数据方面："></a>数据方面：</h1><ol>
<li>图片加载处理（预加载、 懒加载、首屏加载时进度条展示）；</li>
<li>异步请求的优化（使用正常的json数据格式进行交互、数据缓存、数据埋点与统计）；</li>
</ol>
<img src="/blog/2019/05/05/8s7h3j1h/mklm32lk3m2k434313244.webp" class="" title="性能优化图">]]></content>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli@2.0脚手架搭建与打包</title>
    <url>/blog/2019/01/01/Vue-cli@2.0%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="一、vue-cli脚手架"><a href="#一、vue-cli脚手架" class="headerlink" title="一、vue-cli脚手架"></a>一、vue-cli脚手架</h1><p><code>vue.js</code> 核心构成：vuex，vue-cli，vue-router，vue-resource<br>&nbsp;&nbsp;&nbsp;&nbsp;<em>1.1vue-cli</em> ：脚手架，为了保证各施工过程 顺利进行而搭建的工作平台，<br>&nbsp;&nbsp;&nbsp;&nbsp;<em>1.2实际开发</em> ：开发过程中，从零开始构建项目非常的麻烦，所以各种脚手架就应运而生。常见的脚手架：yoeman，express-generator，vue-cli<br>&nbsp;&nbsp;&nbsp;&nbsp;<em>特点</em> ：功能丰富，使用他们能够快速的搭建一个完整的项目，开发者只需要在生成的项目结构的基础上进行开发即可非常高效。<br>&nbsp;&nbsp;&nbsp;&nbsp;极大地降低了webpack的使用难度，并支持热更新，有webpack-dev-server支持，相当于启动了一个请求服务器，帮你搭建了一个测试环境，最为开发者只需要关注开发就ok</p>
<h1 id="二、安装vue-cli"><a href="#二、安装vue-cli" class="headerlink" title="二、安装vue-cli"></a>二、安装vue-cli</h1><p> &nbsp;&nbsp;<em>2.1</em> 需要使用<code>npm</code>，全局安装<code>webpack</code>，由于从<code>webpack@4.0</code>开始需要安装<code>webpack-cli</code><br>&nbsp;&nbsp;<em>2.2</em> 先执行CMD<br>&nbsp;&nbsp;webpack -v  确认是否全局安装过webpack,没有的话执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g webpack</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;再全局安装  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install webpack-cli -g</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;全局安装<code>vue-cli</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g vue-cli  或者  npm install --globel vue-cli</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;安装完成后确认是否安装过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;CMD:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue list        &#x2F;&#x2F;列出可用的模板</span><br></pre></td></tr></table></figure>
<h1 id="三、利用vue-cli构建项目"><a href="#三、利用vue-cli构建项目" class="headerlink" title="三、利用vue-cli构建项目"></a>三、利用vue-cli构建项目</h1><p>   <em>3.1</em> 首先建一个文件夹<br>   然后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd demo</span><br></pre></td></tr></table></figure>
<p>   将构建的项目放进demo文件夹<br>   执行： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack + 项目名称</span><br></pre></td></tr></table></figure>
<p>   执行后显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Project name 确认项目名称</span><br><span class="line">Project description 项目描述</span><br><span class="line">Author  作者</span><br><span class="line">Vue build</span><br><span class="line"> Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY</span><br><span class="line"> allowed in .vue files - render functions are required elsewhere 推荐的运行加编译</span><br><span class="line">Install vue-router  是否安装vue-router</span><br><span class="line">Use ESLint to lint your code 是否使用ESLint管理代码(这块一直又爱又恨)</span><br><span class="line">Set up unit tests 是否建立单元测试</span><br><span class="line">Setup e2e tests with Nightwatch 是否安装端对端的测试</span><br></pre></td></tr></table></figure>
<blockquote>
<p>vue init webpack项目名称：适用于中大型项目<br>vue init webpack-simple：小型项目</p>
</blockquote>
<p>然后 cd 进入项目<br>运行项目 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h1 id="四、打包上线"><a href="#四、打包上线" class="headerlink" title="四、打包上线"></a>四、打包上线</h1><p>自己的项目放在 <em>src</em> 文件夹下<br>编辑开发完成后打包<br>在<code>cmd</code>中执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>打包成功后：默认会生成 <em>dist</em> 文件夹项目上线，只需要将 <em>dist</em> 文件夹放在<code>nginx</code>映射的服务器就可以了<br><img src="https://upload-images.jianshu.io/upload_images/7255677-087930a3da74c424.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="vuejs"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;以上，<a href="mailto:&#86;&#x75;&#x65;&#x2d;&#99;&#x6c;&#x69;&#64;&#x32;&#46;&#x30;">&#86;&#x75;&#x65;&#x2d;&#99;&#x6c;&#x69;&#64;&#x32;&#46;&#x30;</a>脚手架基本搭建在日常的使用中基本就没有什么大问题了，只要多加练习，配合好用的官网，写起东西来肯定会行云流水。💗</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目中mobx的应用</title>
    <url>/blog/2021/09/01/React%E9%A1%B9%E7%9B%AE%E4%B8%ADmobx%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h1><blockquote>
<p>可以将React与Mobx结合起来的一个React组件包,支持React和React-Native</p>
</blockquote>
<ul>
<li><code>observable</code>用来声明可观察的数据。</li>
<li><code>computed</code>是声明可观察数据的演变数据，和 <code>observable</code> 具有同等地位。</li>
<li><code>action</code> 用来改变<code>observable</code>数据。(<code>action </code>不是必须的可以认为其是较好的约定最好遵循)</li>
</ul>
<h1 id="mobx-react"><a href="#mobx-react" class="headerlink" title="mobx-react"></a>mobx-react</h1><blockquote>
<p>Provider、observer、inject均为是mobx-react提供。</p>
</blockquote>
<ul>
<li><code>Provider</code>以组件的形式存在，用来包裹最外层组件节点，并且传入 <code>store</code>通过<code>context </code>传递给后代组件。</li>
<li><code>observer</code>装饰的<code>react</code>组件将转换成一个监听者，当<code>observable</code>修饰的数据变化，react组件就会重新渲染。</li>
<li><code>inject</code>为了使被装饰的组件以<code>props</code>的形式获取到<code>Provider</code>传递过来的数据。</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -S mobx mobx-react </span><br></pre></td></tr></table></figure>

<p>  在<code>package.json</code>中配置支持装饰器语法的开发依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel&#x2F;plugin-proposal-decorators&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.在<code>react</code>项目<code>src</code>文件夹下新建一个用于存放<code>stores</code>的文件夹=&gt;创建一个<code>appStore.js</code>作为项目的<code>store</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; observable, action &#125; from &#39;mobx&#39;; &#x2F;&#x2F; 引入mobx 提供的方法</span><br><span class="line">class HomeStore &#123;</span><br><span class="line">  @observable userName &#x3D; &quot;杨嘉浩&quot;;  &#x2F;&#x2F; 定义一个作为观察的参数,修改会刷新jsx的view</span><br><span class="line">  ......</span><br><span class="line">  @observable xxx &#x3D; &quot;&quot;;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;  用与改变observable数据</span><br><span class="line">  @action changeName &#x3D; (name)&#x3D;&gt;&#123;</span><br><span class="line">      &#x2F;&#x2F; 在jsx中调用 changeName 传入需要更改的 userName</span><br><span class="line">      this.userName &#x3D; name;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#x2F;&#x2F;  可以定义多个 action 搭配 ant Toast 做一些人性化的提示</span><br><span class="line">&#125;</span><br><span class="line">const homeStore &#x3D; new HomeStore ();</span><br><span class="line"></span><br><span class="line">export default homeStore;</span><br></pre></td></tr></table></figure>
<p>这样就是一个通过<code>mobx</code>对一个简单的<code>store</code>的创建,就可以在项目中引入使用。</p>
<p>2.在<code>src</code>文件夹下创建<code>Home.jsx</code>,引入定义的<code>store</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; observer, inject &#125; from &#39;mobx-react&#39;;</span><br><span class="line">&#x2F;&#x2F; 通过 context 将 store 注入并使得任何层级的子组件可以访问到 store</span><br><span class="line">&#x2F;&#x2F; 将store中的数据注入当前组件，下面会在根组件通过 Provider 组件注入它</span><br><span class="line">@inject(&#39;homeStore&#39;)</span><br><span class="line">&#x2F;&#x2F; 使用@observer装饰的react组件将转换成一个监听者，当&#96;inject&#96;的数据发生变化时，react组件就会重新渲染。</span><br><span class="line">@observer  </span><br><span class="line">export default class Home extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state &#x3D; &#123; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      console.log(this.props.homeStore)</span><br><span class="line">      &#x2F;&#x2F; 可以通过props拿到定义的 state 与 action</span><br><span class="line">    &#125;</span><br><span class="line">    change()&#123;</span><br><span class="line">      this.props.homeStore.changeName(&quot;浩嘉杨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">      var &#123; userName &#125; &#x3D; this.props.homeStore;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;div&gt;用户名:&#123;userName&#125;&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;this.change()&#125;&#125;&gt;更改&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.将创建的<code>Home.jsx</code>引入到<code>index.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#123;Provider&#125; from &#39;mobx-react&#39;;</span><br><span class="line">import baseStore from &#39;.&#x2F;stores&#x2F;baseStore&#39;;</span><br><span class="line"></span><br><span class="line">const stores &#x3D; &#123;</span><br><span class="line">    baseStore,</span><br><span class="line">    &#x2F;&#x2F; 便于引入多个 store</span><br><span class="line">&#125;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">        &lt;Page &#x2F;&gt;  &#x2F;&#x2F; 路由组件内容</span><br><span class="line">    &lt;&#x2F;Provider&gt;</span><br><span class="line"> ,document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至此就是<code>react</code>项目中<code>mobx</code>的简单应用了，与<code>action</code>结合异步请求可以实现更多的玩法。提高工作效率的最好办法就是提升自己的能力，还可以给自己增加附加价值。💗</p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取下周一日期</title>
    <url>/blog/2020/03/05/js%E8%8E%B7%E5%8F%96%E4%B8%8B%E5%91%A8%E4%B8%80%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取下周一日期</span><br><span class="line">var date &#x3D; new Date();</span><br><span class="line">    date.setDate(date.getDate() + (8 - date.getDay()));</span><br><span class="line">var y &#x3D; date.getFullYear(); </span><br><span class="line">var m &#x3D; date.getMonth() + 1; </span><br><span class="line">var d &#x3D; date.getDate();</span><br><span class="line">var mvar &#x3D; &#39;&#39;,dvar &#x3D; &#39;&#39;;</span><br><span class="line">m &lt; 10 ? mvar &#x3D; &#39;0&#39; + m : mvar &#x3D; m;</span><br><span class="line">d &lt; 10 ? dvar &#x3D; &#39;0&#39; + d : dvar &#x3D; d;</span><br><span class="line">console.log(y + &quot;-&quot; + mvar + &#39;-&#39; + dvar)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
</search>
